<?xml version='1.0' encoding='UTF-8'?>
<!-- Schema file written by PDE -->
<schema targetNamespace="com.teamcenter.rac.aifrcp">
<annotation>
      <appInfo>
         <meta.schema plugin="com.teamcenter.rac.aifrcp" id="SectionComponent" name="SectionComponent"/>
      </appInfo>
      <documentation>
         This extension point is used to add a section component to an application task pane section.&lt;br&gt;
A section component is associated with an :&lt;br&gt;
- &lt;b&gt;ID&lt;/b&gt; that uniquely identifies the section component&lt;br&gt;
- &lt;b&gt;title&lt;/b&gt; for the section component&lt;br&gt;
- &lt;b&gt;iconBundleName&lt;/b&gt; that points to the bundle if the icons are located in a different bundle&lt;br&gt;
- &lt;b&gt;icon&lt;/b&gt; for the section component&lt;br&gt;
- &lt;b&gt;class&lt;/b&gt; that points to the implementation class of the section component&lt;br&gt;
- &lt;b&gt;secondaryTitle&lt;/b&gt; for the section component&lt;br&gt;
- &lt;b&gt;secondaryActionClass&lt;/b&gt; that points to the implementation class for the secondary action&lt;br&gt;
- &lt;b&gt;Sequence&lt;/b&gt; of SectionComponentID&apos;s that contribute to this application task pane section. Each of the SectionComponentID defined here should correspond to the &lt;b&gt;ID&lt;/b&gt; attribute on the extensions defined for &lt;b&gt;SectionComponent&lt;/b&gt; extension point.
      </documentation>
   </annotation>

   <element name="extension">
      <complexType>
         <sequence minOccurs="1" maxOccurs="unbounded">
            <element ref="SectionComponent" minOccurs="1" maxOccurs="unbounded"/>
         </sequence>
         <attribute name="point" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="id" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
               <appInfo>
                  <meta.attribute translatable="true"/>
               </appInfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="SectionComponent">
      <complexType>
         <attribute name="ID" type="string" use="required">
            <annotation>
               <documentation>
                  Unique identifier that identified this section component.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="title" type="string" use="required">
            <annotation>
               <documentation>
                  Title of the section component.&lt;br&gt;
As this is a translatable value, specify the value for this attribute in the format %keyName and then define the &quot;keyName=Value&quot; in plugin.properties file.&lt;br&gt;
Example:
title=%sectionComponent.title&lt;br&gt;

In the plugin.properties, add the displayable value as:&lt;br&gt;
sectionComponent.title=Statistics
               </documentation>
               <appInfo>
                  <meta.attribute translatable="true"/>
               </appInfo>
            </annotation>
         </attribute>
         <attribute name="iconBundleName" type="string">
            <annotation>
               <documentation>
                  Bundle name for the icons. If the value for this attribute is empty, the icon specified in the &lt;b&gt;icon&lt;/b&gt; attribute would be searched in the current bundle.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="icon" type="string">
            <annotation>
               <documentation>
                  Points to the icon resource file to be associated to the section component.
               </documentation>
               <appInfo>
                  <meta.attribute kind="resource"/>
               </appInfo>
            </annotation>
         </attribute>
         <attribute name="class" type="string" use="required">
            <annotation>
               <documentation>
                  This points to the fully qualified package name of the implementation class for the section component. This class should implement the interface ISectionComponent.
               </documentation>
               <appInfo>
                  <meta.attribute kind="java" basedOn="com.teamcenter.rac.aif.navigationpane.ISectionComponent"/>
               </appInfo>
            </annotation>
         </attribute>
         <attribute name="actionKey" type="string">
            <annotation>
               <documentation>
                  This attribute can be used when the section component represents any Teamcenter command and should point to the unique Teamcenter action string (e.x. newItemAction, newDatasetAction, etc).
               </documentation>
            </annotation>
         </attribute>
         <attribute name="actionClass" type="string">
            <annotation>
               <documentation>
                  If this section component is to be opened by a custom open command, the fully qualified package name of the implementation class (which extends from AbstractSectionDialog) should be specified here. This class would be instantiated whenever users perform any action on the section component.
               </documentation>
               <appInfo>
                  <meta.attribute kind="java" basedOn=":com.teamcenter.rac.aif.navigationpane.dialogs.ISectionDialog"/>
               </appInfo>
            </annotation>
         </attribute>
         <attribute name="useDefaultOpenCommand" type="boolean">
            <annotation>
               <documentation>
                  This can be used to specify if the section component is to be opened using the default Teamcenter open mechanism. This is applicable only for the Teamcenter objects.&lt;br&gt;
If this is set to false, a custom open command can be specified using the &lt;b&gt;actionClass&lt;/b&gt; attribute.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="secondaryTitle" type="string">
            <annotation>
               <documentation>
                  Points to the secondary title of the section component.&lt;br&gt;
As this is a translatable value, specify the value for this attribute in the format %keyName and then define the &quot;keyName=Value&quot; in plugin.properties file.&lt;br&gt;
Example:
title=%sectionComponentSecondary.title&lt;br&gt;

In the plugin.properties, add the displayable value as:&lt;br&gt;
sectionComponentSecondary.title=Some Title
               </documentation>
               <appInfo>
                  <meta.attribute translatable="true"/>
               </appInfo>
            </annotation>
         </attribute>
         <attribute name="secondaryIconBundleName" type="string">
            <annotation>
               <documentation>
                  Bundle name for the icons. If the value for this attribute is empty, the icon specified in the &lt;b&gt;icon&lt;/b&gt; attribute would be searched in the current bundle.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="secondaryIcon" type="string">
            <annotation>
               <documentation>
                  Points to the icon resource file to be associated as a secondary icon for the section component.
               </documentation>
               <appInfo>
                  <meta.attribute kind="resource"/>
               </appInfo>
            </annotation>
         </attribute>
         <attribute name="secondaryActionClass" type="string">
            <annotation>
               <documentation>
                  Fully qualified package name of the java class that gets called whenever users perform any action on the secondary link. This should extend the ResizablePopupMenu class. Following information would be set on the popupmenu:
1. Title
2. Icon
3. If this section component represents a Teamcenter component, that will be set via setObject()
4. Calls the createPartControl() and the implementation class can handle the ui.
               </documentation>
               <appInfo>
                  <meta.attribute kind="java" basedOn="com.teamcenter.rac.util.ResizablePopupMenu"/>
               </appInfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <annotation>
      <appInfo>
         <meta.section type="since"/>
      </appInfo>
      <documentation>
         [Enter the first release in which this extension point appears.]
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="examples"/>
      </appInfo>
      <documentation>
         [Enter extension point usage example here.]
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="apiInfo"/>
      </appInfo>
      <documentation>
         [Enter API information here.]
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="implementation"/>
      </appInfo>
      <documentation>
         [Enter information about supplied implementation of this extension point.]
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="copyright"/>
      </appInfo>
      <documentation>
         
      </documentation>
   </annotation>

</schema>
